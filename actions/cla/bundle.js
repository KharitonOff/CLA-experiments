class Tokenizer{rules;constructor(r=[]){this.rules=r}addRule(r,t){return this.rules.push({test:r,fn:t}),this}tokenize(r,t=s=>s){function*s(a){let i=0;for(const c of a){const u=c.test(r);if(u){const{value:l,length:f}=u;i+=f,r=r.slice(f);const E={...c.fn(l),index:i};yield t(E),yield*s(a)}}}const o=s(this.rules),n=[];for(const a of o)n.push(a);if(r.length)throw new Error(`parser error: string not fully parsed! ${r.slice(0,25)}`);return n}}function digits(e,r=2){return String(e).padStart(r,"0")}function createLiteralTestFunction(e){return r=>r.startsWith(e)?{value:e,length:e.length}:void 0}function createMatchTestFunction(e){return r=>{const t=e.exec(r);if(t)return{value:t,length:t[0].length}}}const defaultRules=[{test:createLiteralTestFunction("yyyy"),fn:()=>({type:"year",value:"numeric"})},{test:createLiteralTestFunction("yy"),fn:()=>({type:"year",value:"2-digit"})},{test:createLiteralTestFunction("MM"),fn:()=>({type:"month",value:"2-digit"})},{test:createLiteralTestFunction("M"),fn:()=>({type:"month",value:"numeric"})},{test:createLiteralTestFunction("dd"),fn:()=>({type:"day",value:"2-digit"})},{test:createLiteralTestFunction("d"),fn:()=>({type:"day",value:"numeric"})},{test:createLiteralTestFunction("HH"),fn:()=>({type:"hour",value:"2-digit"})},{test:createLiteralTestFunction("H"),fn:()=>({type:"hour",value:"numeric"})},{test:createLiteralTestFunction("hh"),fn:()=>({type:"hour",value:"2-digit",hour12:!0})},{test:createLiteralTestFunction("h"),fn:()=>({type:"hour",value:"numeric",hour12:!0})},{test:createLiteralTestFunction("mm"),fn:()=>({type:"minute",value:"2-digit"})},{test:createLiteralTestFunction("m"),fn:()=>({type:"minute",value:"numeric"})},{test:createLiteralTestFunction("ss"),fn:()=>({type:"second",value:"2-digit"})},{test:createLiteralTestFunction("s"),fn:()=>({type:"second",value:"numeric"})},{test:createLiteralTestFunction("SSS"),fn:()=>({type:"fractionalSecond",value:3})},{test:createLiteralTestFunction("SS"),fn:()=>({type:"fractionalSecond",value:2})},{test:createLiteralTestFunction("S"),fn:()=>({type:"fractionalSecond",value:1})},{test:createLiteralTestFunction("a"),fn:e=>({type:"dayPeriod",value:e})},{test:createMatchTestFunction(/^(')(?<value>\\.|[^\']*)\1/),fn:e=>({type:"literal",value:e.groups.value})},{test:createMatchTestFunction(/^.+?\s*/),fn:e=>({type:"literal",value:e[0]})}];class DateTimeFormatter{#e;constructor(r,t=defaultRules){const s=new Tokenizer(t);this.#e=s.tokenize(r,({type:o,value:n,hour12:a})=>{const i={type:o,value:n};return a&&(i.hour12=a),i})}format(r,t={}){let s="";const o=t.timeZone==="UTC";for(const n of this.#e)switch(n.type){case"year":{const i=o?r.getUTCFullYear():r.getFullYear();switch(n.value){case"numeric":{s+=i;break}case"2-digit":{s+=digits(i,2).slice(-2);break}default:throw Error(`FormatterError: value "${n.value}" is not supported`)}break}case"month":{const i=(o?r.getUTCMonth():r.getMonth())+1;switch(n.value){case"numeric":{s+=i;break}case"2-digit":{s+=digits(i,2);break}default:throw Error(`FormatterError: value "${n.value}" is not supported`)}break}case"day":{const i=o?r.getUTCDate():r.getDate();switch(n.value){case"numeric":{s+=i;break}case"2-digit":{s+=digits(i,2);break}default:throw Error(`FormatterError: value "${n.value}" is not supported`)}break}case"hour":{let i=o?r.getUTCHours():r.getHours();switch(i-=n.hour12&&r.getHours()>12?12:0,n.value){case"numeric":{s+=i;break}case"2-digit":{s+=digits(i,2);break}default:throw Error(`FormatterError: value "${n.value}" is not supported`)}break}case"minute":{const i=o?r.getUTCMinutes():r.getMinutes();switch(n.value){case"numeric":{s+=i;break}case"2-digit":{s+=digits(i,2);break}default:throw Error(`FormatterError: value "${n.value}" is not supported`)}break}case"second":{const i=o?r.getUTCSeconds():r.getSeconds();switch(n.value){case"numeric":{s+=i;break}case"2-digit":{s+=digits(i,2);break}default:throw Error(`FormatterError: value "${n.value}" is not supported`)}break}case"fractionalSecond":{const i=o?r.getUTCMilliseconds():r.getMilliseconds();s+=digits(i,Number(n.value));break}case"timeZoneName":break;case"dayPeriod":{s+=n.value?r.getHours()>=12?"PM":"AM":"";break}case"literal":{s+=n.value;break}default:throw Error(`FormatterError: { ${n.type} ${n.value} }`)}return s}parseToParts(r){const t=[];for(const s of this.#e){const o=s.type;let n="";switch(s.type){case"year":{switch(s.value){case"numeric":{n=/^\d{1,4}/.exec(r)?.[0];break}case"2-digit":{n=/^\d{1,2}/.exec(r)?.[0];break}}break}case"month":{switch(s.value){case"numeric":{n=/^\d{1,2}/.exec(r)?.[0];break}case"2-digit":{n=/^\d{2}/.exec(r)?.[0];break}case"narrow":{n=/^[a-zA-Z]+/.exec(r)?.[0];break}case"short":{n=/^[a-zA-Z]+/.exec(r)?.[0];break}case"long":{n=/^[a-zA-Z]+/.exec(r)?.[0];break}default:throw Error(`ParserError: value "${s.value}" is not supported`)}break}case"day":{switch(s.value){case"numeric":{n=/^\d{1,2}/.exec(r)?.[0];break}case"2-digit":{n=/^\d{2}/.exec(r)?.[0];break}default:throw Error(`ParserError: value "${s.value}" is not supported`)}break}case"hour":{switch(s.value){case"numeric":{n=/^\d{1,2}/.exec(r)?.[0],s.hour12&&parseInt(n)>12&&console.error("Trying to parse hour greater than 12. Use 'H' instead of 'h'.");break}case"2-digit":{n=/^\d{2}/.exec(r)?.[0],s.hour12&&parseInt(n)>12&&console.error("Trying to parse hour greater than 12. Use 'HH' instead of 'hh'.");break}default:throw Error(`ParserError: value "${s.value}" is not supported`)}break}case"minute":{switch(s.value){case"numeric":{n=/^\d{1,2}/.exec(r)?.[0];break}case"2-digit":{n=/^\d{2}/.exec(r)?.[0];break}default:throw Error(`ParserError: value "${s.value}" is not supported`)}break}case"second":{switch(s.value){case"numeric":{n=/^\d{1,2}/.exec(r)?.[0];break}case"2-digit":{n=/^\d{2}/.exec(r)?.[0];break}default:throw Error(`ParserError: value "${s.value}" is not supported`)}break}case"fractionalSecond":{n=new RegExp(`^\\d{${s.value}}`).exec(r)?.[0];break}case"timeZoneName":{n=s.value;break}case"dayPeriod":{n=/^(A|P)M/.exec(r)?.[0];break}case"literal":{if(!r.startsWith(s.value))throw Error(`Literal "${s.value}" not found "${r.slice(0,25)}"`);n=s.value;break}default:throw Error(`${s.type} ${s.value}`)}if(!n)throw Error(`value not valid for token { ${o} ${n} } ${r.slice(0,25)}`);t.push({type:o,value:n}),r=r.slice(n.length)}if(r.length)throw Error(`datetime string was not fully parsed! ${r.slice(0,25)}`);return t}sortDateTimeFormatPart(r){let t=[];const s=["year","month","day","hour","minute","second","fractionalSecond"];for(const o of s){const n=r.findIndex(a=>a.type===o);n!==-1&&(t=t.concat(r.splice(n,1)))}return t=t.concat(r),t}partsToDate(r){const t=new Date,s=r.find(o=>o.type==="timeZoneName"&&o.value==="UTC");s?t.setUTCHours(0,0,0,0):t.setHours(0,0,0,0);for(const o of r)switch(o.type){case"year":{const n=Number(o.value.padStart(4,"20"));s?t.setUTCFullYear(n):t.setFullYear(n);break}case"month":{const n=Number(o.value)-1;s?t.setUTCMonth(n):t.setMonth(n);break}case"day":{const n=Number(o.value);s?t.setUTCDate(n):t.setDate(n);break}case"hour":{let n=Number(o.value);r.find(i=>i.type==="dayPeriod")?.value==="PM"&&(n+=12),s?t.setUTCHours(n):t.setHours(n);break}case"minute":{const n=Number(o.value);s?t.setUTCMinutes(n):t.setMinutes(n);break}case"second":{const n=Number(o.value);s?t.setUTCSeconds(n):t.setSeconds(n);break}case"fractionalSecond":{const n=Number(o.value);s?t.setUTCMilliseconds(n):t.setMilliseconds(n);break}}return t}parse(r){const t=this.parseToParts(r),s=this.sortDateTimeFormatPart(t);return this.partsToDate(s)}}var Day;(function(e){e[e.Sun=0]="Sun",e[e.Mon=1]="Mon",e[e.Tue=2]="Tue",e[e.Wed=3]="Wed",e[e.Thu=4]="Thu",e[e.Fri=5]="Fri",e[e.Sat=6]="Sat"})(Day||(Day={}));const osType=(()=>globalThis.Deno!=null?Deno.build.os:globalThis.navigator?.appVersion?.includes?.("Win")??!1?"windows":"linux")();class DenoStdInternalError extends Error{constructor(r){super(r);this.name="DenoStdInternalError"}}function existsSync(e){try{return Deno.lstatSync(e),!0}catch(r){if(r instanceof Deno.errors.NotFound)return!1;throw r}}class DenoStdInternalError1 extends Error{constructor(r){super(r);this.name="DenoStdInternalError"}}function assert(e,r=""){if(!e)throw new DenoStdInternalError1(r)}function get(e,r){if(Object.prototype.hasOwnProperty.call(e,r))return e[r]}function getForce(e,r){const t=get(e,r);return assert(t!=null),t}function isNumber(e){return typeof e=="number"||/^0x[0-9a-f]+$/i.test(String(e))?!0:/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(String(e))}function hasKey(e,r){let t=e;return r.slice(0,-1).forEach(o=>{t=get(t,o)??{}}),r[r.length-1]in t}function parse(e,{"--":r=!1,alias:t={},boolean:s=!1,default:o={},stopEarly:n=!1,string:a=[],unknown:i=c=>c}={}){const c={bools:{},strings:{},unknownFn:i,allBools:!1};if(s!==void 0)if(typeof s=="boolean")c.allBools=!!s;else{const p=typeof s=="string"?[s]:s;for(const d of p.filter(Boolean))c.bools[d]=!0}const u={};if(t!==void 0)for(const p in t){const d=getForce(t,p);typeof d=="string"?u[p]=[d]:u[p]=d;for(const g of getForce(u,p))u[g]=[p].concat(u[p].filter(m=>g!==m))}if(a!==void 0){const p=typeof a=="string"?[a]:a;for(const d of p.filter(Boolean)){c.strings[d]=!0;const g=get(u,d);if(g)for(const m of g)c.strings[m]=!0}}const l={_:[]};function f(p,d){return c.allBools&&/^--[^=]+$/.test(d)||get(c.bools,p)||!!get(c.strings,p)||!!get(u,p)}function E(p,d,g){let m=p;d.slice(0,-1).forEach(function(w){get(m,w)===void 0&&(m[w]={}),m=get(m,w)});const h=d[d.length-1];get(m,h)===void 0||get(c.bools,h)||typeof get(m,h)=="boolean"?m[h]=g:Array.isArray(get(m,h))?m[h].push(g):m[h]=[get(m,h),g]}function T(p,d,g=void 0){if(g&&c.unknownFn&&!f(p,g)&&c.unknownFn(g,p,d)===!1)return;const m=!get(c.strings,p)&&isNumber(d)?Number(d):d;E(l,p.split("."),m);const h=get(u,p);if(h)for(const w of h)E(l,w.split("."),m)}function y(p){return getForce(u,p).some(d=>typeof get(c.bools,d)=="boolean")}for(const p of Object.keys(c.bools))T(p,o[p]===void 0?!1:o[p]);let v=[];e.includes("--")&&(v=e.slice(e.indexOf("--")+1),e=e.slice(0,e.indexOf("--")));for(let p=0;p<e.length;p++){const d=e[p];if(/^--.+=/.test(d)){const g=d.match(/^--([^=]+)=(.*)$/s);assert(g!=null);const[,m,h]=g;c.bools[m]?T(m,h!=="false",d):T(m,h,d)}else if(/^--no-.+/.test(d)){const g=d.match(/^--no-(.+)/);assert(g!=null),T(g[1],!1,d)}else if(/^--.+/.test(d)){const g=d.match(/^--(.+)/);assert(g!=null);const[,m]=g,h=e[p+1];h!==void 0&&!/^-/.test(h)&&!get(c.bools,m)&&!c.allBools&&(get(u,m)?!y(m):!0)?(T(m,h,d),p++):/^(true|false)$/.test(h)?(T(m,h==="true",d),p++):T(m,get(c.strings,m)?"":!0,d)}else if(/^-[^-]+/.test(d)){const g=d.slice(1,-1).split("");let m=!1;for(let w=0;w<g.length;w++){const b=d.slice(w+2);if(b==="-"){T(g[w],b,d);continue}if(/[A-Za-z]/.test(g[w])&&/=/.test(b)){T(g[w],b.split(/=(.+)/)[1],d),m=!0;break}if(/[A-Za-z]/.test(g[w])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(b)){T(g[w],b,d),m=!0;break}if(g[w+1]&&g[w+1].match(/\W/)){T(g[w],d.slice(w+2),d),m=!0;break}else T(g[w],get(c.strings,g[w])?"":!0,d)}const[h]=d.slice(-1);!m&&h!=="-"&&(e[p+1]&&!/^(-|--)[^-]/.test(e[p+1])&&!get(c.bools,h)&&(get(u,h)?!y(h):!0)?(T(h,e[p+1],d),p++):e[p+1]&&/^(true|false)$/.test(e[p+1])?(T(h,e[p+1]==="true",d),p++):T(h,get(c.strings,h)?"":!0,d))}else if((!c.unknownFn||c.unknownFn(d)!==!1)&&l._.push(c.strings._??!isNumber(d)?d:Number(d)),n){l._.push(...e.slice(p+1));break}}for(const p of Object.keys(o))if(!hasKey(l,p.split("."))&&(E(l,p.split("."),o[p]),u[p]))for(const d of u[p])E(l,d.split("."),o[p]);if(r){l["--"]=[];for(const p of v)l["--"].push(p)}else for(const p of v)l._.push(p);return l}function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout,globalContext;typeof window!="undefined"?globalContext=window:typeof self!="undefined"?globalContext=self:globalContext={},typeof globalContext.setTimeout=="function"&&(cachedSetTimeout=setTimeout),typeof globalContext.clearTimeout=="function"&&(cachedClearTimeout=clearTimeout);function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(r){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(r){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}var queue=[],draining=!1,currentQueue,queueIndex=-1;function cleanUpNextTick(){!draining||!currentQueue||(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var r=queue.length;r;){for(currentQueue=queue,queue=[];++queueIndex<r;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,r=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function nextTick(e){var r=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)r[t-1]=arguments[t];queue.push(new Item(e,r)),queue.length===1&&!draining&&runTimeout(drainQueue)}function Item(e,r){this.fun=e,this.array=r}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title="browser",platform="browser",browser=!0,argv=[],version="",versions={},release={},config={};function noop(){}var on=noop,addListener=noop,once1=noop,off=noop,removeListener=noop,removeAllListeners=noop,emit=noop;function binding(e){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(e){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance=globalContext.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return new Date().getTime()};function hrtime(e){var r=performanceNow.call(performance)*.001,t=Math.floor(r),s=Math.floor(r%1*1e9);return e&&(t=t-e[0],s=s-e[1],s<0&&(t--,s+=1e9)),[t,s]}var startTime=new Date;function uptime(){var e=new Date,r=e-startTime;return r/1e3}var process={nextTick,title,browser,env:{NODE_ENV:"production"},argv,version,versions,on,addListener,once:once1,off,removeListener,removeAllListeners,emit,binding,cwd,chdir,umask,hrtime,platform,release,config,uptime};function getUserAgent(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&"version"in process?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}var register_1=register;function register(e,r,t,s){if(typeof t!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(r)?r.reverse().reduce(function(o,n){return register.bind(null,e,n,o,s)},t)():Promise.resolve().then(function(){return e.registry[r]?e.registry[r].reduce(function(o,n){return n.hook.bind(null,o,s)},t)():t(s)})}var add=addHook;function addHook(e,r,t,s){var o=s;e.registry[t]||(e.registry[t]=[]),r==="before"&&(s=function(n,a){return Promise.resolve().then(o.bind(null,a)).then(n.bind(null,a))}),r==="after"&&(s=function(n,a){var i;return Promise.resolve().then(n.bind(null,a)).then(function(c){return i=c,o(i,a)}).then(function(){return i})}),r==="error"&&(s=function(n,a){return Promise.resolve().then(n.bind(null,a)).catch(function(i){return o(i,a)})}),e.registry[t].push({hook:s,orig:o})}var remove=removeHook;function removeHook(e,r,t){if(!!e.registry[r]){var s=e.registry[r].map(function(o){return o.orig}).indexOf(t);s!==-1&&e.registry[r].splice(s,1)}}var bind=Function.bind,bindable=bind.bind(bind);function bindApi(e,r,t){var s=bindable(remove,null).apply(null,t?[r,t]:[r]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(function(o){var n=t?[r,o,t]:[r,o];e[o]=e.api[o]=bindable(add,null).apply(null,n)})}function HookSingular(){var e="h",r={registry:{}},t=register_1.bind(null,r,e);return bindApi(t,r,e),t}function HookCollection(){var e={registry:{}},r=register_1.bind(null,e);return bindApi(r,e),r}var collectionHookDeprecationMessageDisplayed=!1;function Hook(){return collectionHookDeprecationMessageDisplayed||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),collectionHookDeprecationMessageDisplayed=!0),HookCollection()}Hook.Singular=HookSingular.bind(),Hook.Collection=HookCollection.bind();var beforeAfterHook=Hook,Hook_1=Hook,Singular=Hook.Singular,Collection=Hook.Collection;beforeAfterHook.Hook=Hook_1,beforeAfterHook.Singular=Singular,beforeAfterHook.Collection=Collection;function isObject(e){return Object.prototype.toString.call(e)==="[object Object]"}function isPlainObject(e){var r,t;return isObject(e)===!1?!1:(r=e.constructor,r===void 0?!0:(t=r.prototype,!(isObject(t)===!1||t.hasOwnProperty("isPrototypeOf")===!1)))}function lowercaseKeys(e){return e?Object.keys(e).reduce((r,t)=>(r[t.toLowerCase()]=e[t],r),{}):{}}function mergeDeep(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(s=>{isPlainObject(r[s])?s in e?t[s]=mergeDeep(e[s],r[s]):Object.assign(t,{[s]:r[s]}):Object.assign(t,{[s]:r[s]})}),t}function removeUndefinedProperties(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function merge(e,r,t){if(typeof r=="string"){let[o,n]=r.split(" ");t=Object.assign(n?{method:o,url:n}:{url:o},t)}else t=Object.assign({},r);t.headers=lowercaseKeys(t.headers),removeUndefinedProperties(t),removeUndefinedProperties(t.headers);const s=mergeDeep(e||{},t);return e&&e.mediaType.previews.length&&(s.mediaType.previews=e.mediaType.previews.filter(o=>!s.mediaType.previews.includes(o)).concat(s.mediaType.previews)),s.mediaType.previews=s.mediaType.previews.map(o=>o.replace(/-preview/,"")),s}function addQueryParameters(e,r){const t=/\?/.test(e)?"&":"?",s=Object.keys(r);return s.length===0?e:e+t+s.map(o=>o==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(r[o])}`).join("&")}const urlVariableRegex=/\{[^}]+\}/g;function removeNonChars(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function extractUrlVariableNames(e){const r=e.match(urlVariableRegex);return r?r.map(removeNonChars).reduce((t,s)=>t.concat(s),[]):[]}function omit(e,r){return Object.keys(e).filter(t=>!r.includes(t)).reduce((t,s)=>(t[s]=e[s],t),{})}function encodeReserved(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function encodeUnreserved(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function encodeValue(e,r,t){return r=e==="+"||e==="#"?encodeReserved(r):encodeUnreserved(r),t?encodeUnreserved(t)+"="+r:r}function isDefined(e){return e!=null}function isKeyOperator(e){return e===";"||e==="&"||e==="?"}function getValues(e,r,t,s){var o=e[t],n=[];if(isDefined(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),s&&s!=="*"&&(o=o.substring(0,parseInt(s,10))),n.push(encodeValue(r,o,isKeyOperator(r)?t:""));else if(s==="*")Array.isArray(o)?o.filter(isDefined).forEach(function(a){n.push(encodeValue(r,a,isKeyOperator(r)?t:""))}):Object.keys(o).forEach(function(a){isDefined(o[a])&&n.push(encodeValue(r,o[a],a))});else{const a=[];Array.isArray(o)?o.filter(isDefined).forEach(function(i){a.push(encodeValue(r,i))}):Object.keys(o).forEach(function(i){isDefined(o[i])&&(a.push(encodeUnreserved(i)),a.push(encodeValue(r,o[i].toString())))}),isKeyOperator(r)?n.push(encodeUnreserved(t)+"="+a.join(",")):a.length!==0&&n.push(a.join(","))}else r===";"?isDefined(o)&&n.push(encodeUnreserved(t)):o===""&&(r==="&"||r==="?")?n.push(encodeUnreserved(t)+"="):o===""&&n.push("");return n}function parseUrl(e){return{expand:expand.bind(null,e)}}function expand(e,r){var t=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,o,n){if(o){let i="";const c=[];if(t.indexOf(o.charAt(0))!==-1&&(i=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(u){var l=/([^:\*]*)(?::(\d+)|(\*))?/.exec(u);c.push(getValues(r,i,l[1],l[2]||l[3]))}),i&&i!=="+"){var a=",";return i==="?"?a="&":i!=="#"&&(a=i),(c.length!==0?i:"")+c.join(a)}else return c.join(",")}else return encodeReserved(n)})}function parse1(e){let r=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),o,n=omit(e,["method","baseUrl","url","headers","request","mediaType"]);const a=extractUrlVariableNames(t);t=parseUrl(t).expand(n),/^http/.test(t)||(t=e.baseUrl+t);const i=Object.keys(e).filter(l=>a.includes(l)).concat("baseUrl"),c=omit(n,i);if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(l=>l.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),e.mediaType.previews.length)){const l=s.accept.match(/[\w-]+(?=-preview)/g)||[];s.accept=l.concat(e.mediaType.previews).map(f=>{const E=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${f}-preview${E}`}).join(",")}return["GET","HEAD"].includes(r)?t=addQueryParameters(t,c):"data"in c?o=c.data:Object.keys(c).length?o=c:s["content-length"]=0,!s["content-type"]&&typeof o!="undefined"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof o=="undefined"&&(o=""),Object.assign({method:r,url:t,headers:s},typeof o!="undefined"?{body:o}:null,e.request?{request:e.request}:null)}function endpointWithDefaults(e,r,t){return parse1(merge(e,r,t))}function withDefaults(e,r){const t=merge(e,r),s=endpointWithDefaults.bind(null,t);return Object.assign(s,{DEFAULTS:t,defaults:withDefaults.bind(null,t),merge:merge.bind(null,t),parse:parse1})}const VERSION="6.0.12",userAgent=`octokit-endpoint.js/${VERSION} ${getUserAgent()}`,DEFAULTS={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":userAgent},mediaType:{format:"",previews:[]}},endpoint=withDefaults(null,DEFAULTS);class Deprecation extends Error{constructor(r){super(r);Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var wrappy_1=wrappy;function wrappy(e,r){if(e&&r)return wrappy(e)(r);if(typeof e!="function")throw new TypeError("need wrapper function");return Object.keys(e).forEach(function(s){t[s]=e[s]}),t;function t(){for(var s=new Array(arguments.length),o=0;o<s.length;o++)s[o]=arguments[o];var n=e.apply(this,s),a=s[s.length-1];return typeof n=="function"&&n!==a&&Object.keys(a).forEach(function(i){n[i]=a[i]}),n}}var once_1=wrappy_1(once2),strict=wrappy_1(onceStrict);once2.proto=once2(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once2(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return onceStrict(this)},configurable:!0})});function once2(e){var r=function(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function onceStrict(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},t=e.name||"Function wrapped with `once`";return r.onceError=t+" shouldn't be called more than once",r.called=!1,r}once_1.strict=strict;const logOnceCode=once_1(e=>console.warn(e)),logOnceHeaders=once_1(e=>console.warn(e));class RequestError extends Error{constructor(r,t,s){super(r);Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t;let o;"headers"in s&&typeof s.headers!="undefined"&&(o=s.headers),"response"in s&&(this.response=s.response,o=s.response.headers);const n=Object.assign({},s.request);s.request.headers.authorization&&(n.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),n.url=n.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=n,Object.defineProperty(this,"code",{get(){return logOnceCode(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t}}),Object.defineProperty(this,"headers",{get(){return logOnceHeaders(new Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),o||{}}})}}var getGlobal=function(){if(typeof self!="undefined")return self;if(typeof window!="undefined")return window;if(typeof global!="undefined")return global;throw new Error("unable to locate global object")},global=getGlobal(),nodeFetch=global.fetch.bind(global);const VERSION1="5.6.0";function getBufferResponse(e){return e.arrayBuffer()}function fetchWrapper(e){const r=e.request&&e.request.log?e.request.log:console;(isPlainObject(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let t={},s,o;return(e.request&&e.request.fetch||nodeFetch)(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then(async a=>{o=a.url,s=a.status;for(const i of a.headers)t[i[0]]=i[1];if("deprecation"in t){const i=t.link&&t.link.match(/<([^>]+)>; rel="deprecation"/),c=i&&i.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${t.sunset}${c?`. See ${c}`:""}`)}if(!(s===204||s===205)){if(e.method==="HEAD"){if(s<400)return;throw new RequestError(a.statusText,s,{response:{url:o,status:s,headers:t,data:void 0},request:e})}if(s===304)throw new RequestError("Not modified",s,{response:{url:o,status:s,headers:t,data:await getResponseData(a)},request:e});if(s>=400){const i=await getResponseData(a);throw new RequestError(toErrorMessage(i),s,{response:{url:o,status:s,headers:t,data:i},request:e})}return getResponseData(a)}}).then(a=>({status:s,url:o,headers:t,data:a})).catch(a=>{throw a instanceof RequestError?a:new RequestError(a.message,500,{request:e})})}async function getResponseData(e){const r=e.headers.get("content-type");return/application\/json/.test(r)?e.json():!r||/^text\/|charset=utf-8$/.test(r)?e.text():getBufferResponse(e)}function toErrorMessage(e){return typeof e=="string"?e:"message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}`:e.message:`Unknown error: ${JSON.stringify(e)}`}function withDefaults1(e,r){const t=e.defaults(r);return Object.assign(function(o,n){const a=t.merge(o,n);if(!a.request||!a.request.hook)return fetchWrapper(t.parse(a));const i=(c,u)=>fetchWrapper(t.parse(t.merge(c,u)));return Object.assign(i,{endpoint:t,defaults:withDefaults1.bind(null,t)}),a.request.hook(i,a)},{endpoint:t,defaults:withDefaults1.bind(null,t)})}const request=withDefaults1(endpoint,{headers:{"user-agent":`octokit-request.js/${VERSION1} ${getUserAgent()}`}});class GraphqlError extends Error{constructor(r,t){const s=t.data.errors[0].message;super(s);Object.assign(this,t.data),Object.assign(this,{headers:t.headers}),this.name="GraphqlError",this.request=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const NON_VARIABLE_OPTIONS=["method","baseUrl","url","headers","request","query","mediaType"],FORBIDDEN_VARIABLE_OPTIONS=["query","method","url"],GHES_V3_SUFFIX_REGEX=/\/api\/v3\/?$/;function graphql(e,r,t){if(t){if(typeof r=="string"&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in t)if(!!FORBIDDEN_VARIABLE_OPTIONS.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const s=typeof r=="string"?Object.assign({query:r},t):r,o=Object.keys(s).reduce((a,i)=>NON_VARIABLE_OPTIONS.includes(i)?(a[i]=s[i],a):(a.variables||(a.variables={}),a.variables[i]=s[i],a),{}),n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return GHES_V3_SUFFIX_REGEX.test(n)&&(o.url=n.replace(GHES_V3_SUFFIX_REGEX,"/api/graphql")),e(o).then(a=>{if(a.data.errors){const i={};for(const c of Object.keys(a.headers))i[c]=a.headers[c];throw new GraphqlError(o,{headers:i,data:a.data})}return a.data.data})}function withDefaults2(e,r){const t=e.defaults(r);return Object.assign((o,n)=>graphql(t,o,n),{defaults:withDefaults2.bind(null,t),endpoint:request.endpoint})}function withCustomRequest(e){return withDefaults2(e,{method:"POST",url:"/graphql"})}async function auth(e){const r=e.split(/\./).length===3?"app":/^v\d+\./.test(e)?"installation":"oauth";return{type:"token",token:e,tokenType:r}}function withAuthorizationPrefix(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function hook(e,r,t,s){const o=r.endpoint.merge(t,s);return o.headers.authorization=withAuthorizationPrefix(e),r(o)}const createTokenAuth=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(auth.bind(null,r),{hook:hook.bind(null,r)})},{Collection:Collection1}=beforeAfterHook,VERSION2="3.4.0";class Octokit{constructor(r={}){const t=new Collection1,s={baseUrl:request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(s.headers["user-agent"]=[r.userAgent,`octokit-core.js/${VERSION2} ${getUserAgent()}`].filter(Boolean).join(" "),r.baseUrl&&(s.baseUrl=r.baseUrl),r.previews&&(s.mediaType.previews=r.previews),r.timeZone&&(s.headers["time-zone"]=r.timeZone),this.request=request.defaults(s),this.graphql=withCustomRequest(this.request).defaults(s),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},r.log),this.hook=t,r.authStrategy){const{authStrategy:n,...a}=r,i=n(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},r.auth));t.wrap("request",i.hook),this.auth=i}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const n=createTokenAuth(r.auth);t.wrap("request",n.hook),this.auth=n}this.constructor.plugins.forEach(n=>{Object.assign(this,n(this,r))})}static defaults(r){return class extends this{constructor(...s){const o=s[0]||{};if(typeof r=="function"){super(r(o));return}super(Object.assign({},r,o,o.userAgent&&r.userAgent?{userAgent:`${o.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var t;const s=this.plugins;return t=class extends this{},t.plugins=s.concat(r.filter(n=>!s.includes(n))),t}}Octokit.VERSION=VERSION2,Octokit.plugins=[];const Endpoints={actions:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createContentAttachmentForRepo:["POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],getConductCode:["GET /codes_of_conduct/{key}",{mediaType:{previews:["scarlet-witch"]}}],getForRepo:["GET /repos/{owner}/{repo}/community/code_of_conduct",{mediaType:{previews:["scarlet-witch"]}}]},emojis:{get:["GET /emojis"]},enterpriseAdmin:{disableSelectedOrganizationGithubActionsEnterprise:["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],enableSelectedOrganizationGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],getAllowedActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],getGithubActionsPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions"],listSelectedOrganizationsEnabledGithubActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/organizations"],setAllowedActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],setGithubActionsPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions"],setSelectedOrganizationsEnabledGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",{mediaType:{previews:["mockingbird"]}}],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],listForAuthenticatedUser:["GET /user/migrations",{mediaType:{previews:["wyandotte"]}}],listForOrg:["GET /orgs/{org}/migrations",{mediaType:{previews:["wyandotte"]}}],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],createCard:["POST /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],createColumn:["POST /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],createForAuthenticatedUser:["POST /user/projects",{mediaType:{previews:["inertia"]}}],createForOrg:["POST /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],createForRepo:["POST /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],delete:["DELETE /projects/{project_id}",{mediaType:{previews:["inertia"]}}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],deleteColumn:["DELETE /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],get:["GET /projects/{project_id}",{mediaType:{previews:["inertia"]}}],getCard:["GET /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],getColumn:["GET /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission",{mediaType:{previews:["inertia"]}}],listCards:["GET /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],listCollaborators:["GET /projects/{project_id}/collaborators",{mediaType:{previews:["inertia"]}}],listColumns:["GET /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],listForOrg:["GET /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],listForRepo:["GET /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],listForUser:["GET /users/{username}/projects",{mediaType:{previews:["inertia"]}}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{mediaType:{previews:["inertia"]}}],moveColumn:["POST /projects/columns/{column_id}/moves",{mediaType:{previews:["inertia"]}}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],update:["PATCH /projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateCard:["PATCH /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],updateColumn:["PATCH /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",{mediaType:{previews:["lydian"]}}],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteLegacy:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{deprecated:"octokit.rest.reactions.deleteLegacy() is deprecated, see https://docs.github.com/rest/reference/reactions/#delete-a-reaction-legacy"}],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createPagesSite:["POST /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],createRelease:["POST /repos/{owner}/{repo}/releases"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate",{mediaType:{previews:["baptiste"]}}],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",{mediaType:{previews:["groot"]}}],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",{mediaType:{previews:["groot"]}}],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits",{mediaType:{previews:["cloak"]}}],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics",{mediaType:{previews:["mercy"]}}],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{mediaType:{previews:["inertia"]}}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys"],deleteEmailForAuthenticated:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},VERSION3="5.3.1";function endpointsToMethods(e,r){const t={};for(const[s,o]of Object.entries(r))for(const[n,a]of Object.entries(o)){const[i,c,u]=a,[l,f]=i.split(/ /),E=Object.assign({method:l,url:f},c);t[s]||(t[s]={});const T=t[s];if(u){T[n]=decorate(e,s,n,E,u);continue}T[n]=e.request.defaults(E)}return t}function decorate(e,r,t,s,o){const n=e.request.defaults(s);function a(...i){let c=n.endpoint.merge(...i);if(o.mapToData)return c=Object.assign({},c,{data:c[o.mapToData],[o.mapToData]:void 0}),n(c);if(o.renamed){const[u,l]=o.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${u}.${l}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const u=n.endpoint.merge(...i);for(const[l,f]of Object.entries(o.renamedParameters))l in u&&(e.log.warn(`"${l}" parameter is deprecated for "octokit.${r}.${t}()". Use "${f}" instead`),f in u||(u[f]=u[l]),delete u[l]);return n(u)}return n(...i)}return Object.assign(a,n)}function restEndpointMethods(e){return{rest:endpointsToMethods(e,Endpoints)}}restEndpointMethods.VERSION=VERSION3;function legacyRestEndpointMethods(e){const r=endpointsToMethods(e,Endpoints);return{...r,rest:r}}legacyRestEndpointMethods.VERSION=VERSION3;const VERSION4="2.13.3";function normalizePaginatedListResponse(e){if(!("total_count"in e.data&&!("url"in e.data)))return e;const t=e.data.incomplete_results,s=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const n=Object.keys(e.data)[0],a=e.data[n];return e.data=a,typeof t!="undefined"&&(e.data.incomplete_results=t),typeof s!="undefined"&&(e.data.repository_selection=s),e.data.total_count=o,e}function iterator(e,r,t){const s=typeof r=="function"?r.endpoint(t):e.request.endpoint(r,t),o=typeof r=="function"?r:e.request,n=s.method,a=s.headers;let i=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!i)return{done:!0};const c=await o({method:n,url:i,headers:a}),u=normalizePaginatedListResponse(c);return i=((u.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:u}}})}}function paginate(e,r,t,s){return typeof t=="function"&&(s=t,t=void 0),gather(e,[],iterator(e,r,t)[Symbol.asyncIterator](),s)}function gather(e,r,t,s){return t.next().then(o=>{if(o.done)return r;let n=!1;function a(){n=!0}return r=r.concat(s?s(o.value,a):o.value.data),n?r:gather(e,r,t,s)})}function paginateRest(e){return{paginate:Object.assign(paginate.bind(null,e),{iterator:iterator.bind(null,e)})}}paginateRest.VERSION=VERSION4;function debug(e,r){issue("debug",e),r!==void 0&&issue("debug",Deno.inspect(r))}function toBase64(e){return btoa(`${JSON.stringify(e,null,2)}
`)}async function read(e){const t=new TextDecoder("utf-8").decode(await Deno.readFile(e));try{return JSON.parse(t)}catch(s){throw s.message=`${e}: ${s.message}`,s instanceof SyntaxError?new Error(s.message):s}}function readSync(e){const t=new TextDecoder("utf-8").decode(Deno.readFileSync(e));try{return JSON.parse(t)}catch(s){throw s.message=`${e}: ${s.message}`,s instanceof SyntaxError?new Error(s.message):s}}const mod=function(){return{toBase64,read,readSync}}();function info(e){console.log(escapeData(e))}function warning(e){issue("warning",e)}function error(e){issue("error",e)}function fail(e){error(e),Deno.exit(1)}const Octokit1=Octokit.plugin(legacyRestEndpointMethods,paginateRest);let octokit=new Octokit1;class Context{payload;eventName;sha;ref;workflow;action;actor;job;runNumber;runId;apiUrl;serverUrl;graphqlUrl;constructor(){this.payload={};const r=Deno.env.get("GITHUB_EVENT_PATH");r!==void 0&&(existsSync(r)?this.payload=readSync(r):warning(`GITHUB_EVENT_PATH ${r} does not exist`)),this.eventName=Deno.env.get("GITHUB_EVENT_NAME"),this.sha=Deno.env.get("GITHUB_SHA"),this.ref=Deno.env.get("GITHUB_REF"),this.workflow=Deno.env.get("GITHUB_WORKFLOW"),this.action=Deno.env.get("GITHUB_ACTION"),this.actor=Deno.env.get("GITHUB_ACTOR"),this.job=Deno.env.get("GITHUB_JOB"),this.runNumber=parseInt(Deno.env.get("GITHUB_RUN_NUMBER"),10),this.runId=parseInt(Deno.env.get("GITHUB_RUN_ID"),10),this.apiUrl=Deno.env.get("GITHUB_API_URL")??"https://api.github.com",this.serverUrl=Deno.env.get("GITHUB_SERVER_URL")??"https://github.com",this.graphqlUrl=Deno.env.get("GITHUB_GRAPHQL_URL")??"https://api.github.com/graphql"}get issue(){const r=this.payload;return{...this.repo,number:(r.issue||r.pull_request||r).number}}get repo(){const r=Deno.env.get("GITHUB_REPOSITORY");if(r!==void 0){const[t,s]=r.split("/");return{owner:t,repo:s}}if(this.payload.repository)return{owner:this.payload.repository.owner.login,repo:this.payload.repository.name};throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'")}}const context=new Context,CMD_STRING="::";function issue(e,r=""){e||="missing.command",console.log(`${CMD_STRING}${e}${CMD_STRING}${escapeData(r)}`)}function escapeData(e){return e.replace(/%/g,"%25").replace(/\r/g,"%0D").replace(/\n/g,"%0A")}async function workflowId(){const r=(await octokit.actions.listRepoWorkflows(context.repo).catch(t=>{throw new Error(`Error occurred when fetching action workflow id: ${t.message}`)})).data.workflows.find(t=>t.name===context.workflow);if(r===void 0)throw new Error("Unable to locate this workflow's ID in this repository");return r.id}async function workflowRuns(e,r,t){return(await octokit.actions.listWorkflowRuns({...context.repo,branch:e,workflow_id:r,event:t}).catch(o=>{throw new Error(`Error occurred when fetching action workflow runs: ${o.message}`)})).data}let personalOctokit=new Octokit1;async function reRun(e){await personalOctokit.actions.reRunWorkflow({...context.repo,run_id:e}).catch(r=>{throw new Error(`Error occurred while re-running run ${e}: ${r.message}`)})}async function getWorkflow(e){return(await octokit.actions.getWorkflowRun({...context.repo,run_id:e}).catch(t=>{throw new Error(`Error occurred when fetching workflow run ${e}: ${t.message}`)})).data}const mod1=function(){return{debug,info,warning,error,fail,workflowId,workflowRuns,reRun,getWorkflow}}();function initOctokit(e,r){octokit=new Octokit1({auth:e}),personalOctokit=new Octokit1({auth:r})}async function lock(){const e=context.issue.number;await octokit.issues.lock({...context.repo,issue_number:e}).catch(r=>{throw new Error(`Error occurred when locking the pull request #${e}: ${r.message}`)}),info(`Successfully locked the pull request #${e}`)}async function branch(){const e=context.issue.number;return(await octokit.pulls.get({owner:context.repo.owner,repo:context.repo.repo,pull_number:e}).catch(t=>{throw new Error(`Error occurred when fetching pull request (#${e}) branch: ${t.message}`)})).data.head.ref}async function createComment(e){const r=context.issue.number;await octokit.issues.createComment({...context.repo,issue_number:r,body:e}).catch(t=>{throw new Error(`Error occurred when creating a pull request (#${r}) comment: ${t.message}`)}),debug(`Successfully created a pull request (#${r}) comment: ${e}`)}async function updateComment(e,r){const t=context.issue.number;await octokit.issues.updateComment({...context.repo,comment_id:e,body:r}).catch(s=>{throw new Error(`Error occurred when updating the pull request (#${t}) comment #${e}: ${s.message}`)}),debug(`Successfully updated the pull request (#${t}) comment #${e}: ${r}`)}async function deleteComment(e){const r=context.issue.number;await octokit.issues.deleteComment({...context.repo,comment_id:e}).catch(t=>{throw new Error(`Error occurred when deleting the pull request (#${r}) comment #${e}: ${t.message}`)}),debug(`Successfully deleted the pull request (#${r}) comment #${e}`)}async function listComments(){const e=[],r=context.issue.number,t=octokit.paginate.iterator(octokit.issues.listComments,{...context.repo,issue_number:r,per_page:100});try{for await(const s of t)e.push(...s.data);return e}catch(s){throw new Error(`Error occurred when fetching pull request (#${r}) comments: ${s.message}`)}}async function addLabels(...e){const r=context.issue.number;await octokit.issues.addLabels({...context.repo,issue_number:r,labels:e}).catch(t=>{throw new Error(`Error occurred when adding pull request (#${r}) labels: ${t.message}`)})}async function removeLabel(e){const r=context.issue.number;await octokit.issues.removeLabel({...context.repo,issue_number:r,name:e}).catch(t=>{throw new Error(`Error occurred when removing pull request (#${r}) label: ${t.message}`)})}async function getLabels(){const e=context.issue.number,r=[],t=octokit.paginate.iterator(octokit.issues.listLabelsOnIssue,{...context.repo,issue_number:e,per_page:100});try{for await(const s of t)for(const o of s.data)r.push(o.name);return r}catch(s){throw new Error(`Error occurred when fetching pull request (#${e}) labels: ${s.message}`)}}const mod2=function(){return{lock,branch,createComment,updateComment,deleteComment,listComments,addLabels,removeLabel,getLabels}}();function gql(e,...r){return`${e[0]}${r.reduce((t,s,o)=>`${t} ${s} ${e[o+1]} `,"")}`.replace(/\s+/g," ")}function generateCommentAnchor(e,r=""){return`<!-- ${e} comment anchor ${r} -->`}function spliceArray(e,r){for(let t=0;t<e.length;t++)r(e[t])&&(e.splice(t,1),t--)}function normalizeText(e){return e.trim().toLowerCase().replace(/\s+/g," ")}function defaultConverter(e){fail("Data conversion not implemented.")}function checkStorageContent(e,r,t=defaultConverter){e.type!==r.type&&fail("The given storage content type is invalid."),e.version>r.version&&fail("Unsupported storage content version. Please update your github action."),e.version<r.version&&t(e)}let options2;function removeEmpty(e){for(const r in e)(e[r]===void 0||e[r]==="")&&delete e[r];return e}function setupOptions(e){e.githubToken||=Deno.env.get("GITHUB_TOKEN")??"",e.personalAccessToken||=Deno.env.get("PERSONAL_ACCESS_TOKEN")??"",mod1.debug("Raw options",e),e.githubToken===""&&mod1.fail("Missing github token. Please provide one as an environment variable."),e.personalAccessToken===""&&mod1.fail("Missing personal access token (https://github.com/settings/tokens/new). Please provide one as an environment variable."),e.CLAPath===""&&mod1.fail("Missing CLA path."),initOctokit(e.githubToken,e.personalAccessToken),e.storage??={type:"local"},e.storage.type==="remote-github"&&(e.storage.owner??=context.repo.owner),e.storage.path||=".github/contributor-assistant/cla.json",e.storage.branch||=void 0,e.ignoreList??=[],e.lockPRAfterMerge??=!0,e.message={commit:{setup:"Creating file for storing CLA signatures",signed:"New CLA signatures on pull request #${pull-request-number}",...removeEmpty(e.message?.commit)},comment:{allSigned:"All contributors have signed the CLA  \u270D\uFE0F \u2705",header:"Thank you for your submission, we really appreciate it. Like many open-source projects, we ask that ${you} sign our [Contributor License Agreement](${cla-path}) before we can accept your contribution. You can sign the CLA by just posting a Pull Request comment same as the below format.",summary:"**${signed}** out of **${total}** committers have signed the CLA.",footer:"<sub>You can re-trigger this bot by commenting `${re-trigger}` in this Pull Request</sub>",newSignature:"*(new signature required)*",coAuthorWarning:"*You have co-authored a commit with the following people, who are not registered on Github. By signing, you also sign on their behalf.*",unknownAccount:"*unknown account*",unknownWarning:"\u26A0 Some commits do not have associated github accounts. If you have already a GitHub account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user).",...removeEmpty(e.message?.comment)},input:{signature:"I have read the CLA Document and I hereby sign the CLA",reTrigger:"recheck",...removeEmpty(e.message?.input)}},e.labels={signed:"",unsigned:"",ignore:"",...removeEmpty(e.labels)},options2=e,mod1.debug("Parsed options",options2)}function getSignatureStatus(e,r){return{update:!1,signed:r.signatures.filter(t=>t.prNumber===context.payload.pull_request?.number),unsigned:e.filter(t=>t.user===null?!r.signatures.some(s=>s.name===t.name&&s.email===t.email&&s.prNumber===context.payload.pull_request?.number):!r.signatures.some(s=>s.user?.databaseId===t.user.databaseId)),unknown:e.filter(t=>t.user===null&&t.coAuthoredWith===void 0)}}function updateSignatures(e,r,t){const s=normalizeText(options2.message.input.signature),o=e.filter(u=>normalizeText(u.body??"").startsWith(s)),n=[...r.signed].filter(u=>u.user!==null),a=u=>l=>l.user!==null&&l.user.databaseId===u.user?.id,i=u=>l=>u!==void 0&&l.user===null&&l.coAuthoredWith===u,c=u=>l=>l.prNumber===context.payload.pull_request?.number&&i(u)(l);for(const u of o){for(const f of r.unsigned)if(i(u.user?.id)(f)){r.update=!0;const E={...f,prNumber:context.issue.number};t.signatures.push(E),r.signed.push(E)}spliceArray(r.unsigned,i(u.user?.id));const l=r.unsigned.find(a(u));if(l!==void 0){r.update=!0;const f={...l,prNumber:context.issue.number};t.signatures.push(f),r.signed.push(f),spliceArray(r.unsigned,a(u))}spliceArray(n,a(u))}for(const u of n){r.update=!0,spliceArray(t.signatures,l=>l.user?.databaseId===u.user.databaseId),spliceArray(r.signed,l=>l.user?.databaseId===u.user.databaseId),r.unsigned.push(u);for(const l of t.signatures)c(u.user.databaseId)(l)&&r.unsigned.push(l);spliceArray(t.signatures,c(u.user.databaseId)),spliceArray(r.signed,c(u.user.databaseId))}}const applicationType="contributor-assistant/CLA",defaultContent={type:applicationType,version:1,data:{signatures:[]}};function readStorage(){switch(options2.storage.type){case"local":case"remote-github":return readGithubStorage(options2.storage);default:mod1.fail("Unknown storage type")}}async function readGithubStorage(e){const r=e.type==="local"?octokit:personalOctokit,t=e.type==="local"?{...context.repo,path:e.path,branch:e.branch}:e;try{const s=await r.repos.getContent({...t,ref:t.branch});if(Array.isArray(s.data))mod1.fail("File path is a directory");else if(!("content"in s.data))mod1.fail("No content");else{const o=s.data.sha;return{content:JSON.parse(atob(s.data.content)),sha:o}}}catch(s){if(s.status===404){const o=defaultContent,n=await r.repos.createOrUpdateFileContents({...t,message:options2.message.commit.setup,content:mod.toBase64(o)}).catch(a=>mod1.fail(`Error occurred when creating the signature file: ${a.message||a}. Make sure the branch where signatures are stored is NOT protected.`));return{content:o,sha:n.data.content.sha}}else mod1.fail(`Could not retrieve repository contents: ${s.message}. Status: ${s.status||"unknown"}`)}}function writeStorage(e){switch(options2.storage.type){case"local":case"remote-github":return writeGithubStorage(e,options2.storage);default:mod1.fail("Unknown storage type")}}async function writeGithubStorage(e,r){const t=r.type==="local"?octokit:personalOctokit,s=r.type==="local"?{...context.repo,path:r.path,branch:r.branch}:r;await t.repos.createOrUpdateFileContents({...s,message:options2.message.commit.signed.replace("${pull-request-number}",context.issue.number.toString()),content:mod.toBase64(e.content),sha:e.sha}).catch(o=>mod1.fail(`Could not update the JSON file: ${o.message}`))}async function updateLabels(e){const r=await mod2.getLabels(),{signed:t,unsigned:s}=options2.labels;e.unsigned.length===0?t!==""&&!r.includes(t)&&(await mod2.addLabels(t),s!==""&&r.includes(s)&&await mod2.removeLabel(s)):s!==""&&!r.includes(s)&&(await mod2.addLabels(s),t!==""&&r.includes(t)&&await mod2.removeLabel(t))}async function hasIgnoreLabel(){return options2.labels.ignore===""||ignoreLabelEvent()?!1:(await mod2.getLabels()).includes(options2.labels.ignore)}function ignoreLabelEvent(){return context.eventName==="pull_request_target"&&["labeled","unlabeled"].includes(context.payload.action??"")&&context.payload.label?.name===options2.labels.ignore}function reRunRequired(){if(ignoreLabelEvent())return!0;if(context.eventName!=="issue_comment")return!1;const e=normalizeText(options2.message.input.signature),r=normalizeText(context.payload.comment?.body??""),t=normalizeText(context.payload.changes?.body?.from??"");return!!r.startsWith(e)||!!t.startsWith(e)||r===normalizeText(options2.message.input.reTrigger)}async function reRun1(){const e=await mod2.branch(),r=await mod1.workflowId(),t=await mod1.workflowRuns(e,r,"pull_request_target");if(t.total_count>0){const s=t.workflow_runs[0].id;mod1.info(`Re-running build run id ${s}`),await mod1.reRun(s).catch(o=>mod1.error(`Error occurred when re-running the workflow: ${o}`))}}function escapeRegExp(e){const r=/[\\^$.*+?()[\]{}|]/g;return e&&r.test(e)?e.replace(RegExp(r.source),"\\$&"):e}function filterIgnored(e){return e.filter(r=>!options2.ignoreList.some(t=>{if(t=t.trim(),t.includes("*")){const s=escapeRegExp(t).split("\\*").join(".*");return new RegExp(s).test(r.name)}return t===r}))}const gitActorFragment=gql`\nfragment gitActor on GitActor {\n  name\n  email\n  user {\n    databaseId\n    login\n  }\n}`,coAuthorsFragment=gql`\nfragment coAuthors on Commit {\n  authors(first: $authorCount, after: $authorCursor) {\n    nodes {\n      ...gitActor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n${gitActorFragment}`,authorsQuery=gql`\nquery getAuthors($owner: String!, $name: String!, $number: Int!, $commitCursor: String = "", $authorCursor: String = "", $commitCount: Int = 100, $authorCount: Int = 10) {\n  repository(owner: $owner, name: $name) {\n    pullRequest(number: $number) {\n      commits(first: $commitCount, after: $commitCursor) {\n        edges {\n          cursor\n          node {\n            commit {\n              author {\n                ...gitActor\n              }\n              ...coAuthors\n            }\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n}\n${coAuthorsFragment}`,coAuthorsQuery=gql`\nquery getCoAuthors($owner: String!, $name: String!, $number: Int!, $commitCursor: String!, $authorCount: Int = 100) {\n  repository(owner: $owner, name: $name) {\n    pullRequest(number: $number) {\n      commits(first: 1, after: $commitCursor) {\n        edges {\n          node {\n            commit {\n              ...coAuthors\n            }\n          }\n        }\n      }\n    }\n  }\n}\n${coAuthorsFragment}`;async function getCommitters(){const e=[],r={owner:context.repo.owner,name:context.repo.repo,number:context.issue.number};let t="",s=!1;do{const o=await personalOctokit.graphql(authorsQuery,{...r,commitCursor:t}),{commits:n}=o.repository.pullRequest;for(const a of n.edges){let{cursor:i,node:{commit:{author:c,authors:{nodes:u,pageInfo:{endCursor:l}}}}}=a;if(c.user?.databaseId===41898282)continue;let f=!1;for(;f;){const E=await personalOctokit.graphql(coAuthorsQuery,{...r,commitCursor:i,authorCursor:l}),{nodes:T,pageInfo:y}=E.repository.pullRequest.commits.edges[0].node.commit.authors;u.push(...T),l=y.endCursor,f=y.hasNextPage}pushAuthor(c,u,e)}t=n.pageInfo.endCursor,s=n.pageInfo.hasNextPage}while(s);return e}function pushAuthor(e,r,t){const s=(i,c)=>i.user!==null||i.name!==c.name&&i.email!==c.email,o=i=>e.user?.databaseId===i.user?.databaseId,n=i=>t.every(c=>c.user?.databaseId!==i.user?.databaseId),a=i=>c=>c.user===null&&i.name===c.name&&i.email===c.email;e.user===null?t.every(i=>s(i,e))&&t.push(e):n(e)&&t.push(e);for(const i of r)i.user===null?(spliceArray(t,a(i)),s(e,i)&&t.push({...i,coAuthoredWith:e.user?.databaseId})):!o(i)&&n(i)&&t.push(i)}const commentAnchor=generateCommentAnchor(applicationType);async function commentPR(e,r,t){const s=e.find(o=>o.body?.match(commentAnchor));s===void 0?r.unsigned.length>0||r.unknown.length>0?await mod2.createComment(createBody(r,t)):mod1.info("Everyone has already signed the CLA."):await mod2.updateComment(s.id,createBody(r,t))}async function uncommentPR(){const r=(await mod2.listComments()).find(t=>t.body?.match(commentAnchor));r!==void 0&&await mod2.deleteComment(r.id)}function createBody(e,r){let t=`${commentAnchor}
## Contributor Assistant | CLA
`;const s=options2.message.comment,o=options2.message.input;if(e.unsigned.length===0&&e.unknown.length===0)return t+s.allSigned;const n=e.signed.length+e.unsigned.length;t+=`${s.header.replace("${you}",n>1?"you all":"you").replace("${cla-path}",options2.CLAPath)}
  - - -
  **${o.signature}**
  - - -
  `;let a=!1;if(n>1){t+=`${s.summary}
`.replace("${signed}",e.signed.length.toString()).replace("${total}",n.toString());for(const c of e.signed)t+=":white_check_mark: ",c.user!==null?t+=`@${c.user.login}
`:t+=`${c.name} (${c.email})
`;const i=new Map;for(const c of e.unsigned)c.user!==null&&i.set(c.user.databaseId,{author:c,coAuthors:new Set});for(const c of e.unsigned)if(c.user===null){const u=i.get(c.coAuthoredWith);if(u===void 0){const l=r.signatures.find(f=>f.user!==null&&f.user.databaseId===c.coAuthoredWith);l===void 0?mod1.warning("No author was found for this coAuthor."):i.set(l.user.databaseId,{author:l,coAuthors:new Set([c]),needReSign:!0})}else{const{coAuthors:l}=u;l.add(c)}}for(const[c,{author:u,coAuthors:l,needReSign:f}]of i){if(f?t+=`:arrows_counterclockwise: @${u.user.login} ${s.newSignature}`:t+=`:x: @${u.user.login} `,l.size>0){a=!0,t+=`${s.coAuthorWarning}
`;for(const E of l)t+=` - :heavy_multiplication_x: ${E.name} (${E.email})
`}t+=`
`}}if(e.unknown.length>0||a){for(const i of e.unknown)t+=`:grey_question: ${i.name} (${i.email}) 
`;t+=`
${s.unknownWarning}
`}return t+s.footer.replace("${re-trigger}",o.reTrigger)}async function cla(e){mod1.info("Contributor Assistant: CLA process started"),setupOptions(e);try{await hasIgnoreLabel()?(mod1.info(`CLA process skipped due to the "${options2.labels.ignore}" label`),await uncommentPR()):context.payload.pull_request?.merged&&options2.lockPRAfterMerge?(mod1.info("Locking the Pull Request to safe guard the Pull Request CLA Signatures"),await mod2.lock()):reRunRequired()?await reRun1():await run()}catch(r){mod1.debug(String(r.stack)),mod1.fail(String(r.message))}}async function run(){const e=await readStorage(),{content:r}=e;checkStorageContent(r,defaultContent);const t=filterIgnored(await getCommitters()),s=getSignatureStatus(t,r.data);mod1.debug("Signature status",s);const o=await mod2.listComments();updateSignatures(o,s,r.data),mod1.debug("Updated signature status",s),await commentPR(o,s,r.data),s.update&&await writeStorage(e),await updateLabels(s),s.unsigned.length===0?mod1.info(options2.message.comment.allSigned):mod1.fail(`Committers of Pull Request #${context.issue.number} have to sign the CLA \u{1F4DD}`)}const flags=parse(Deno.args,{string:["githubToken","personalAccessToken","CLAPath","storageRemoteRepo","storageRemoteOwner","storageBranch","storagePath","ignoreList","inputSignature","inputReTrigger","signedLabel","unsignedLabel","ignoreLabel"],default:{githubToken:"",personalAccessToken:"",CLAPath:"",storageRemoteRepo:"",storageRemoteOwner:"",storageBranch:"",storagePath:"",ignoreList:"",inputSignature:"",inputReTrigger:"",signedLabel:"",unsignedLabel:"",ignoreLabel:""}});mod1.debug("Flags",flags),cla({githubToken:flags.githubToken,personalAccessToken:flags.personalAccessToken,CLAPath:flags.CLAPath,storage:flags.storageRemoteRepo.length>0?{type:"remote-github",repo:flags.storageRemoteRepo,owner:flags.storageRemoteOwner,branch:flags.storageBranch,path:flags.storagePath}:{type:"local",branch:flags.storageBranch,path:flags.storagePath},ignoreList:flags.ignoreList.split(/\s,\s/),lockPRAfterMerge:parseBoolean(flags.lockPRAfterMerge),message:{input:{signature:flags.inputSignature,reTrigger:flags.inputReTrigger}},labels:{signed:flags.signedLabel,unsigned:flags.unsignedLabel,ignore:flags.ignoreLabel}});function parseBoolean(e){switch(e){case"true":return!0;case"false":return!1;default:return}}
